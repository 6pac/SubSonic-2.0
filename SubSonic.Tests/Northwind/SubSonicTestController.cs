using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Northwind
{
    /// <summary>
    /// Controller class for SubSonicTests
    /// </summary>
    [System.ComponentModel.DataObject]
    public partial class SubSonicTestController
    {
        // Preload our schema..
        SubSonicTest thisSchemaLoad = new SubSonicTest();
        private string userName = String.Empty;
        protected string UserName
        {
            get
            {
				if (userName.Length == 0) 
				{
    				if (System.Web.HttpContext.Current != null)
    				{
						userName=System.Web.HttpContext.Current.User.Identity.Name;
					}
					else
					{
						userName=System.Threading.Thread.CurrentPrincipal.Identity.Name;
					}
				}
				return userName;
            }
        }
        [DataObjectMethod(DataObjectMethodType.Select, true)]
        public SubSonicTestCollection FetchAll()
        {
            SubSonicTestCollection coll = new SubSonicTestCollection();
            Query qry = new Query(SubSonicTest.Schema);
            coll.LoadAndCloseReader(qry.ExecuteReader());
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Select, false)]
        public SubSonicTestCollection FetchByID(object SubSonicTestID)
        {
            SubSonicTestCollection coll = new SubSonicTestCollection().Where("SubSonicTestID", SubSonicTestID).Load();
            return coll;
        }
		
		[DataObjectMethod(DataObjectMethodType.Select, false)]
        public SubSonicTestCollection FetchByQuery(Query qry)
        {
            SubSonicTestCollection coll = new SubSonicTestCollection();
            coll.LoadAndCloseReader(qry.ExecuteReader()); 
            return coll;
        }
        [DataObjectMethod(DataObjectMethodType.Delete, true)]
        public bool Delete(object SubSonicTestID)
        {
            return (SubSonicTest.Delete(SubSonicTestID) == 1);
        }
        [DataObjectMethod(DataObjectMethodType.Delete, false)]
        public bool Destroy(object SubSonicTestID)
        {
            return (SubSonicTest.Destroy(SubSonicTestID) == 1);
        }
        
        
    	
	    /// <summary>
	    /// Inserts a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Insert, true)]
	    public void Insert(int Thinger,string Name,string UserName,DateTime CreatedOn,decimal Price,double Discount,decimal? Lat,decimal? LongX,bool SomeFlag,bool? SomeNullableFlag,string LongText,string MediumText)
	    {
		    SubSonicTest item = new SubSonicTest();
		    
            item.Thinger = Thinger;
            
            item.Name = Name;
            
            item.UserName = UserName;
            
            item.CreatedOn = CreatedOn;
            
            item.Price = Price;
            
            item.Discount = Discount;
            
            item.Lat = Lat;
            
            item.LongX = LongX;
            
            item.SomeFlag = SomeFlag;
            
            item.SomeNullableFlag = SomeNullableFlag;
            
            item.LongText = LongText;
            
            item.MediumText = MediumText;
            
	    
		    item.Save(UserName);
	    }
    	
	    /// <summary>
	    /// Updates a record, can be used with the Object Data Source
	    /// </summary>
        [DataObjectMethod(DataObjectMethodType.Update, true)]
	    public void Update(int SubSonicTestID,int Thinger,string Name,string UserName,DateTime CreatedOn,decimal Price,double Discount,decimal? Lat,decimal? LongX,bool SomeFlag,bool? SomeNullableFlag,string LongText,string MediumText)
	    {
		    SubSonicTest item = new SubSonicTest();
	        item.MarkOld();
	        item.IsLoaded = true;
		    
			item.SubSonicTestID = SubSonicTestID;
				
			item.Thinger = Thinger;
				
			item.Name = Name;
				
			item.UserName = UserName;
				
			item.CreatedOn = CreatedOn;
				
			item.Price = Price;
				
			item.Discount = Discount;
				
			item.Lat = Lat;
				
			item.LongX = LongX;
				
			item.SomeFlag = SomeFlag;
				
			item.SomeNullableFlag = SomeNullableFlag;
				
			item.LongText = LongText;
				
			item.MediumText = MediumText;
				
	        item.Save(UserName);
	    }
    }
}
