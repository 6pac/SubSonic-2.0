<?xml version="1.0"?>
<doc>
    <assembly>
        <name>sonic</name>
    </assembly>
    <members>
        <member name="T:SubSonic.SubCommander.DBScripter">
            <summary>
            
            </summary>
        </member>
        <member name="M:SubSonic.SubCommander.DBScripter.ScriptData(System.String,System.String)">
            <summary>
            Scripts the data.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="providerName">Name of the provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SubCommander.DBScripter.ScriptSchema(System.String)">
            <summary>
            Scripts the schema.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns></returns>
        </member>
        <member name="T:SubSonic.SubCommander.Arguments">
            <summary>
            Command Line Parsing Library.
            </summary>
        </member>
        <member name="M:SubSonic.SubCommander.Arguments.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SubSonic.SubCommander.Arguments"/> class.
            </summary>
            <param name="commandLine">The command line.</param>
        </member>
        <member name="P:SubSonic.SubCommander.Arguments.Item(System.String)">
            <summary>
            Retrieve a parameter value if it exists (overriding C# indexer property)
            </summary>
            <value></value>
        </member>
        <member name="T:SubSonic.SubCommander.CodeRunner">
            <summary>
            Runs and executes code for use with our scripted bits - like Migrations
            </summary>
        </member>
        <member name="M:SubSonic.SubCommander.CodeRunner.RunAndExecute(SubSonic.ICodeLanguage,System.String,System.String,System.Object[])">
            <summary>
            Executes the passed-in code
            </summary>
            <param name="lang">ICodeLanguage</param>
            <param name="sourceCode">the code</param>
            <param name="methodName">the entry point method</param>
            <param name="parameters">the params</param>
        </member>
        <member name="T:SubSonic.SubCommander.Program">
            <summary>
            
            </summary>
        </member>
        <member name="M:SubSonic.SubCommander.Program.Main(System.String[])">
            <summary>
            Main
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:SubSonic.SubCommander.Program.ThrowHelp(System.Boolean)">
            <summary>
            Throws the help.
            </summary>
            <param name="verbose">if set to <c>true</c> [verbose].</param>
        </member>
        <member name="M:SubSonic.SubCommander.Program.WriteVersionInformation(System.String)">
            <summary>
            Writes the version information.
            </summary>
            <param name="formatString">The format string.</param>
        </member>
        <member name="M:SubSonic.SubCommander.Program.Migrate">
            <summary>
            Migrates the specified migration directory.
            </summary>
        </member>
        <member name="M:SubSonic.SubCommander.Program.GetConfigPath">
            <summary>
            Gets the config path.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SubCommander.Program.GetConfigInDir(System.String)">
            <summary>
            Tries to find the config file in the specified directory.
            </summary>
            <param name="directory">The directory.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SubCommander.Program.SetProvider">
            <summary>
            Sets the provider.
            </summary>
        </member>
        <member name="M:SubSonic.SubCommander.Program.SetProviderManually">
            <summary>
            Sets the provider manually.
            </summary>
        </member>
        <member name="M:SubSonic.SubCommander.Program.SetConfig(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Sets the config.
            </summary>
            <param name="config">The config.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:SubSonic.SubCommander.Program.SetProvider(System.String)">
            <summary>
            Sets the provider.
            </summary>
            <param name="appConfigPath">The app config path.</param>
        </member>
        <member name="M:SubSonic.SubCommander.Program.GetOutputDirectory">
            <summary>
            Gets the output directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SubCommander.Program.OutputFile(System.String,System.String)">
            <summary>
            Outputs the file.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="fileText">The file text.</param>
        </member>
        <member name="M:SubSonic.SubCommander.Program.GetArg(System.String)">
            <summary>
            Gets the arg.
            </summary>
            <param name="argSwitch">The arg switch.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SubCommander.Program.GetConnnectionString">
            <summary>
            Gets the connnection string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SubCommander.Program.VersionDB">
            <summary>
            Versions the DB.
            </summary>
        </member>
        <member name="M:SubSonic.SubCommander.Program.ScriptData">
            <summary>
            Scripts the data.
            </summary>
        </member>
        <member name="M:SubSonic.SubCommander.Program.ScriptSchema">
            <summary>
            Scripts the schema.
            </summary>
        </member>
        <member name="M:SubSonic.SubCommander.Program.GenerateEditor">
            <summary>
            Generates the editor.
            </summary>
        </member>
        <member name="M:SubSonic.SubCommander.Program.GenerateEditor(System.String,System.String)">
            <summary>
            Generates the editor.
            </summary>
            <param name="table">The table.</param>
            <param name="outDir">The out dir.</param>
        </member>
        <member name="M:SubSonic.SubCommander.Program.GenerateAll">
            <summary>
            Generates all.
            </summary>
        </member>
        <member name="M:SubSonic.SubCommander.Program.IsExcluded(System.String)">
            <summary>
            Determines whether the specified table name is excluded.
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns>
            	<c>true</c> if the specified table name is excluded; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.SubCommander.Program.IsInList(System.String)">
            <summary>
            Determines whether [is in list] [the specified table name].
            </summary>
            <param name="tableName">Name of the table.</param>
            <returns>
            	<c>true</c> if [is in list] [the specified table name]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SubSonic.SubCommander.Program.GetOutSubDir(System.Configuration.Provider.ProviderBase)">
            <summary>
            Gets the out sub dir.
            </summary>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:SubSonic.SubCommander.Program.GenerateTables">
            <summary>
            Generates the tables.
            </summary>
        </member>
        <member name="M:SubSonic.SubCommander.Program.GenerateODSControllers">
            <summary>
            Generates the ODS controllers.
            </summary>
        </member>
        <member name="M:SubSonic.SubCommander.Program.GenerateViews">
            <summary>
            Generates the views.
            </summary>
        </member>
        <member name="M:SubSonic.SubCommander.Program.GenerateSPs">
            <summary>
            Generates the S ps.
            </summary>
        </member>
        <member name="M:SubSonic.SubCommander.Program.GenerateStructs">
            <summary>
            Generates the structs.
            </summary>
        </member>
    </members>
</doc>
